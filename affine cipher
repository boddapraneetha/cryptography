from sympy import mod_inverse

def affine_decrypt(ciphertext, a, b):
    a_inv = mod_inverse(a, 26)  # Modular inverse of a
    plaintext = ""
    
    for char in ciphertext:
        if char.isalpha():
            is_upper = char.isupper()
            char_num = ord(char.lower()) - ord('a')
            plain_num = (a_inv * (char_num - b)) % 26
            plaintext += chr(plain_num + (ord('A') if is_upper else ord('a')))
        else:
            plaintext += char
    
    return plaintext
ciphertext = input("Enter the ciphertext: ")

# B -> E (4), U -> T (19)
C1, P1 = 1, 4  # B -> E
C2, P2 = 20, 19  # U -> T

a = (C1 - C2) * mod_inverse(P1 - P2, 26) % 26
b = (C1 - a * P1) % 26

print(f"Keys found: a = {a}, b = {b}")

plaintext = affine_decrypt(ciphertext, a, b)
print("Decrypted text:", plaintext)
